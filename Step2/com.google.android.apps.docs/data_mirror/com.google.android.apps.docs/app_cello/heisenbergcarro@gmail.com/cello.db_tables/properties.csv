PID,DN,DP,TN,RL,property,value
"(PID, com.google.android.apps.docs)","(DN, cello.db)","(DP, /home/kali/Desktop/RA/Heisenberg Android/Dump/data_mirror/data_ce/null/0/com.google.android.apps.docs/app_cello/heisenbergcarro@gmail.com/cello.db)","(TN, properties)","(RL, 1)","(property, root_id)","(value, MEFHNHRxbHhfdzFuT1VrOVBWQQ==)"
"(PID, com.google.android.apps.docs)","(DN, cello.db)","(DP, /home/kali/Desktop/RA/Heisenberg Android/Dump/data_mirror/data_ce/null/0/com.google.android.apps.docs/app_cello/heisenbergcarro@gmail.com/cello.db)","(TN, properties)","(RL, 2)","(property, client_options)","(value, Cg5jbGllbnRfb3B0aW9ucyLrBggBEAEQAhADEAQQBhAHEAgQCRAKEAsQDBANEBUQGBAZEBwQIBAiECMQKRAtEC8QMBAxEDIQNRA2EDcQOhA7ED0QPhBDEEQQRhBKEEwQTRBOEE8QUBBREFIQUxBVEFYQVxBYEFkQWhBdEF4QXxBgEGIQYxBlEGYQbBBtEHMQdRB3EHgQeRB7EHwQfhCAARCBARCCARCDARCEARCFARCGARCHARCJARCKARCSARCWARCaARCbARCeARCfARCiARCkARCoARCrARC5ARC7ARC8ARC9ARC+ARDDARDEARDFARDJARDKARDLARDSARDTARDUARDVARDWARDXARDbARDsBxgDeAKCAboCIqwCQ2FrZW1peC8yLjIxLjEwMS4wNi40MCAoZDFxIFJQMUEuMjAwNzIwLjAxMikgR29vZ2xlLkRyaXZlLzIuMjEuMTAxLjA2LjQwIChPUz1BbmRyb2lkO09TVmVyPTExO01hbnVmYWN0dXJlcj1zYW1zdW5nO01vZGVsPVNNLU45NzBVMTtTeW5jRW5naW5lPUNlbGxvKSBNb3ppbGxhLzUuMCAoTGludXg7IFU7IEFuZHJvaWQgMTE7IGVuLXVzOyBTTS1OOTcwVTEgQnVpbGQvUlAxQS4yMDA3MjAuMDEyKSBBcHBsZVdlYktpdC81MjUuMTArIChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi8zLjAuNCBNb2JpbGUgU2FmYXJpLzUyMy4xMi4ymAHwogS4AQC4AgGaAQYoAEAASAHgAQCYAwHiAwVlbi1VU/gDMrAEAcIEDkZFQVRVUkVfU1dJVENIwgQIRFJJVkVfQkXiBAlwdWJsaXNoZWToBACCBRNhbmRyb2lkLXN5bmMtbmF0aXZluAUJuAUVuAVeuAVfuAV6uAWLAbgFjAG4BY0BuAWOAbgFjwG4BZABuAWRAbgFlwG4BZgBuAWZAbgFuwG4BdoB4AUAkAYBqAYAsAYBuAYB2AYAgAcBoAcBqAcBsgdaEAE6Vi9kYXRhL3VzZXIvMC9jb20uZ29vZ2xlLmFuZHJvaWQuYXBwcy5kb2NzL2FwcF9jZWxsby9oZWlzZW5iZXJnY2Fycm9AZ21haWwuY29tL2NlbGxvLmRiwAcB8AcBwAgByAgA4AgB+AgBgAkB)"
"(PID, com.google.android.apps.docs)","(DN, cello.db)","(DP, /home/kali/Desktop/RA/Heisenberg Android/Dump/data_mirror/data_ce/null/0/com.google.android.apps.docs/app_cello/heisenbergcarro@gmail.com/cello.db)","(TN, properties)","(RL, 3)","(property, machine_root_cache)","(value, 0)"
"(PID, com.google.android.apps.docs)","(DN, cello.db)","(DP, /home/kali/Desktop/RA/Heisenberg Android/Dump/data_mirror/data_ce/null/0/com.google.android.apps.docs/app_cello/heisenbergcarro@gmail.com/cello.db)","(TN, properties)","(RL, 4)","(property, arbitrary_sync_folder_cache)","(value, 0)"
"(PID, com.google.android.apps.docs)","(DN, cello.db)","(DP, /home/kali/Desktop/RA/Heisenberg Android/Dump/data_mirror/data_ce/null/0/com.google.android.apps.docs/app_cello/heisenbergcarro@gmail.com/cello.db)","(TN, properties)","(RL, 5)","(property, cache_type)","(value, 0)"
"(PID, com.google.android.apps.docs)","(DN, cello.db)","(DP, /home/kali/Desktop/RA/Heisenberg Android/Dump/data_mirror/data_ce/null/0/com.google.android.apps.docs/app_cello/heisenbergcarro@gmail.com/cello.db)","(TN, properties)","(RL, 6)","(property, teamdrive_cache)","(value, 1)"
"(PID, com.google.android.apps.docs)","(DN, cello.db)","(DP, /home/kali/Desktop/RA/Heisenberg Android/Dump/data_mirror/data_ce/null/0/com.google.android.apps.docs/app_cello/heisenbergcarro@gmail.com/cello.db)","(TN, properties)","(RL, 7)","(property, app_list)","(value, CAE=)"
"(PID, com.google.android.apps.docs)","(DN, cello.db)","(DP, /home/kali/Desktop/RA/Heisenberg Android/Dump/data_mirror/data_ce/null/0/com.google.android.apps.docs/app_cello/heisenbergcarro@gmail.com/cello.db)","(TN, properties)","(RL, 8)","(property, sync_engine_schema_version)","(value, ChpzeW5jX2VuZ2luZV9zY2hlbWFfdmVyc2lvbhgC)"
"(PID, com.google.android.apps.docs)","(DN, cello.db)","(DP, /home/kali/Desktop/RA/Heisenberg Android/Dump/data_mirror/data_ce/null/0/com.google.android.apps.docs/app_cello/heisenbergcarro@gmail.com/cello.db)","(TN, properties)","(RL, 9)","(property, largest_change_id)","(value, 5)"
"(PID, com.google.android.apps.docs)","(DN, cello.db)","(DP, /home/kali/Desktop/RA/Heisenberg Android/Dump/data_mirror/data_ce/null/0/com.google.android.apps.docs/app_cello/heisenbergcarro@gmail.com/cello.db)","(TN, properties)","(RL, 10)","(property, account)","(value, Cl0IARIVMTE1ODI5ODAyOTM2NzAxMjg0NjcyGgxIZWlzZW5iZXJnIFdCGWhlaXNlbmJlcmdjYXJyb0BnbWFpbC5jb21yGWhlaXNlbmJlcmdjYXJyb0BnbWFpbC5jb20anScKJAiAgICAPBAAGAAqBBAAGAEqBBAAGAIqBBAAGAMwAUgAaAF4ARITMEFHNHRxbHhfdzFuT1VrOVBWQSJdCjFhcHBsaWNhdGlvbi94LXZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uEihhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMucHJlc2VudGF0aW9uIkQKGXRleHQvdGFiLXNlcGFyYXRlZC12YWx1ZXMSJ2FwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5zcHJlYWRzaGVldCIyCgppbWFnZS9qcGVnEiRhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZG9jdW1lbnQiMQoJaW1hZ2UvYm1wEiRhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZG9jdW1lbnQiMQoJaW1hZ2UvZ2lmEiRhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZG9jdW1lbnQiWQouYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0Lm1hY3JvZW5hYmxlZC4xMhInYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnNwcmVhZHNoZWV0Im8KR2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLnRlbXBsYXRlEiRhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZG9jdW1lbnQiZgo6YXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQucHJlc2VudGF0aW9uLm1hY3JvZW5hYmxlZC4xMhIoYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnByZXNlbnRhdGlvbiJYCjBhcHBsaWNhdGlvbi92bmQubXMtd29yZC50ZW1wbGF0ZS5tYWNyb2VuYWJsZWQuMTISJGFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5kb2N1bWVudCJvCkdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudBIkYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmRvY3VtZW50IjMKC2ltYWdlL3BqcGVnEiRhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZG9jdW1lbnQiUwotYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnNjcmlwdCt0ZXh0L3BsYWluEiJhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuc2NyaXB0IkMKGGFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbBInYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnNwcmVhZHNoZWV0IkYKHmFwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLndyaXRlchIkYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmRvY3VtZW50IlgKMGFwcGxpY2F0aW9uL3ZuZC5tcy13b3JkLmRvY3VtZW50Lm1hY3JvZW5hYmxlZC4xMhIkYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmRvY3VtZW50ImMKN2FwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LnNsaWRlc2hvdy5tYWNyb2VuYWJsZWQuMTISKGFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5wcmVzZW50YXRpb24iMAoIdGV4dC9ydGYSJGFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5kb2N1bWVudCJZCi5hcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnNwcmVhZHNoZWV0EidhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuc3ByZWFkc2hlZXQiMgoKdGV4dC9wbGFpbhIkYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmRvY3VtZW50IlsKMGFwcGxpY2F0aW9uL3gtdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldBInYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnNwcmVhZHNoZWV0IlEKKWFwcGxpY2F0aW9uL3gtdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0EiRhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZG9jdW1lbnQiMQoJaW1hZ2UvcG5nEiRhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZG9jdW1lbnQiOgoSYXBwbGljYXRpb24vbXN3b3JkEiRhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZG9jdW1lbnQiNwoPYXBwbGljYXRpb24vcGRmEiRhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZG9jdW1lbnQiPwoYYXBwbGljYXRpb24veC1tc21ldGFmaWxlEiNhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZHJhd2luZyJvCkRhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC50ZW1wbGF0ZRInYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnNwcmVhZHNoZWV0IkkKHWFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50EihhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMucHJlc2VudGF0aW9uIlwKMWFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC50ZW1wbGF0ZS5tYWNyb2VuYWJsZWQuMTISJ2FwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5zcHJlYWRzaGVldCIzCgtpbWFnZS94LWJtcBIkYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmRvY3VtZW50IjcKD2FwcGxpY2F0aW9uL3J0ZhIkYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmRvY3VtZW50InEKRWFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC50ZW1wbGF0ZRIoYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnByZXNlbnRhdGlvbiIzCgtpbWFnZS94LXBuZxIkYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmRvY3VtZW50IjEKCXRleHQvaHRtbBIkYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmRvY3VtZW50Ik8KJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dBIkYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmRvY3VtZW50InUKSWFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb24SKGFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5wcmVzZW50YXRpb24ibApBYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQSJ2FwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5zcHJlYWRzaGVldCJNCidhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuc2NyaXB0K2pzb24SImFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5zY3JpcHQicgpGYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnNsaWRlc2hvdxIoYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnByZXNlbnRhdGlvbiJiCjZhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC50ZW1wbGF0ZS5tYWNyb2VuYWJsZWQuMTISKGFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5wcmVzZW50YXRpb24iMwoIdGV4dC9jc3YSJ2FwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5zcHJlYWRzaGVldCJbCi9hcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnByZXNlbnRhdGlvbhIoYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnByZXNlbnRhdGlvbiIxCglpbWFnZS9qcGcSJGFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5kb2N1bWVudCI1Cg10ZXh0L3JpY2h0ZXh0EiRhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZG9jdW1lbnQq+AEKJGFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5kb2N1bWVudBIPYXBwbGljYXRpb24vcnRmEidhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHQSCXRleHQvaHRtbBIPYXBwbGljYXRpb24vcGRmEhRhcHBsaWNhdGlvbi9lcHViK3ppcBIPYXBwbGljYXRpb24vemlwEkdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudBIKdGV4dC9wbGFpbiqVAgonYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnNwcmVhZHNoZWV0EjBhcHBsaWNhdGlvbi94LXZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXQSGXRleHQvdGFiLXNlcGFyYXRlZC12YWx1ZXMSD2FwcGxpY2F0aW9uL3BkZhJBYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQSCHRleHQvY3N2Eg9hcHBsaWNhdGlvbi96aXASLmFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXQqMgofYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmphbRIPYXBwbGljYXRpb24vcGRmKk0KImFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5zY3JpcHQSJ2FwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5zY3JpcHQranNvbirDAQooYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnByZXNlbnRhdGlvbhIvYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5wcmVzZW50YXRpb24SD2FwcGxpY2F0aW9uL3BkZhJJYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNlbnRhdGlvbhIKdGV4dC9wbGFpbiozCiBhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZm9ybRIPYXBwbGljYXRpb24vemlwKlwKI2FwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5kcmF3aW5nEg1pbWFnZS9zdmcreG1sEglpbWFnZS9wbmcSD2FwcGxpY2F0aW9uL3BkZhIKaW1hZ2UvanBlZyouCiBhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuc2l0ZRIKdGV4dC9wbGFpbjIrCiRhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZG9jdW1lbnQQgICABTIuCidhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuc3ByZWFkc2hlZXQQgICAMjIvCihhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMucHJlc2VudGF0aW9uEICAgDIyKgojYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmRyYXdpbmcQgICAATIZCg9hcHBsaWNhdGlvbi9wZGYQgICAoMuYATILCgEqEICAgKDLmAE6OgojYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmRyYXdpbmcSEwoGcmVhZGVyEgljb21tZW50ZXI6OwokYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmRvY3VtZW50EhMKBnJlYWRlchIJY29tbWVudGVyOj8KKGFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5wcmVzZW50YXRpb24SEwoGcmVhZGVyEgljb21tZW50ZXI6GAoBKhITCgZyZWFkZXISCWNvbW1lbnRlcjo+CidhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuc3ByZWFkc2hlZXQSEwoGcmVhZGVyEgljb21tZW50ZXI6HwodYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLipQAyCJ/JmHBg==)"
"(PID, com.google.android.apps.docs)","(DN, cello.db)","(DP, /home/kali/Desktop/RA/Heisenberg Android/Dump/data_mirror/data_ce/null/0/com.google.android.apps.docs/app_cello/heisenbergcarro@gmail.com/cello.db)","(TN, properties)","(RL, 11)","(property, account_settings)","(value, )"
